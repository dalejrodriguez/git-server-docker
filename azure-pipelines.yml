# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
     
  displayName: 'Downloading Docker Image Files'
- task: Docker@2
  inputs:
    containerRegistry: 'dpx2'
    repository: 'manasia/gitserver2'
    tags: latest
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
  displayName: 'Building and Pushing Docker Image to staging'
- task: Bash@3
  displayName: 'Sysdig Secure Scan'
  inputs:
    targetType: 'inline'
    script: |
      URL="https://secure.sysdig.com/api/scanning/v1/anchore"
      IMAGE="docker.io/manasia/gitserver2:latest"
      ##################
      # Internal Vars
      ##################
      DIGEST=""
      RETRIES=96
       
      DIGEST=$(curl -s -k --request POST --header "Accept: application/json" --header "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" --data '{"tag":'\"${IMAGE}\"'}' ${URL}/images/ | jq -r ".[].imageDigest" 2>/dev/null)
      [ $? -ne 0 ] && echo "Error adding image to scan queue!" && exit 1
      STATUS=$(curl -s -k --header "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" ${URL}/images/${DIGEST} | jq -r ".[].analysis_status" 2>/dev/null)
      [ $? -ne 0 ] && echo "Error getting analysus status!" && exit 1
      FULLTAG=$(curl -s -k --request POST --header "Accept: application/json" --header "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" --data '{"tag":'\"${IMAGE}\"'}' ${URL}/images/ |  jq -r ".[].image_detail[0].fulltag" 2>/dev/null )
      [ $? -ne 0 ] && echo "Error getting image full tag!" && exit 1
       
      echo $STATUS
       
      for ((i=0;  i<${RETRIES}; i++)); do
          status=$(curl -s -k  --header "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" "${URL}/images/${DIGEST}/check?tag=$FULLTAG&detail=false" | grep "status" | awk '{print $2}') > $(Build.SourcesDirectory)/Scanning_Results_Fail_$(Build.BuildNumber).txt
          if [ ! -z  "$status" ]; then
              echo "Status is $status"
              break
          fi
          echo -n "." && sleep 5
      done
       
      echo "Scan Report - "
      curl -s -k --header "Content-Type: application/json" -H "Authorization: Bearer ${TOKEN}" "${URL}/images/${DIGEST}/check?tag=$FULLTAG&detail=true" > $(Build.SourcesDirectory)/Scanning_Results_Pass_$(Build.BuildNumber).txt
       
      echo "$status" | grep -v fail
      exit $?
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'Sysdig_Scanning_Results'
- task: Docker@2
  inputs:
    containerRegistry: 'dpx2'
    repository: 'manasia/gitserver_prod'
    command: 'push'
    tags: latest
  displayName: 'Pushing image to Production'